import asyncio
import sys

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from handlers.Handlers import YooKassaPaymentProcessor
from config.Config import YOKASSA_KEY, YOKASSA_SHOP


async def continue_b():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'))
    return keyboard

async def choose_voice_model(voice_model, voice_call, voice):
    keyboard = InlineKeyboardMarkup(row_width=3)
    gpt_buttons = [
        {"model": "alloy", "callback": "voice_alloy_call"},
        {"model": "echo", "callback": "voice_echo_call"},
        {"model": "fable", "callback": "voice_fable_call"},
        {"model": "onyx", "callback": "voice_onyx_call"},
        {"model": "nova", "callback": "voice_nova_call"},
        {"model": "shimmer", "callback": "voice_shimmer_call"},
        ]
    for index, button_data in enumerate(gpt_buttons, start=1):
        callback = button_data["callback"]
        model = button_data["model"]

        if model == voice_call:
            model = "‚úÖ " + model

        elif model == voice_model:
            model = "‚úÖ " + model

        button = InlineKeyboardButton(model, callback_data=callback)
        globals()[f'item{index}'] = button

    keyboard.add(item1, item2, item3, item4, item5, item6)
    if voice == "off":
        keyboard.add(InlineKeyboardButton("‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç", callback_data="voice_off_call"))
    elif voice == "on":
        keyboard.add(InlineKeyboardButton("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç", callback_data="voice_on_call"))
    keyboard.add(InlineKeyboardButton('–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–∞', callback_data="voice_check_call"))
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="back_call"))

    return keyboard

async def choose_language():
    keyboard = InlineKeyboardMarkup()
    item2 = InlineKeyboardButton("", callback_data="rus_call")
    item2 = InlineKeyboardButton("", callback_data="eng_call")
    item2 = InlineKeyboardButton("", callback_data="")

async def sub_channels():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('‚ö†Ô∏è–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url="https://t.me/it_neural"))
    keyboard.add(InlineKeyboardButton('‚úÖ–ü–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data="check"))
    return keyboard

async def roles(name, role, status):
    button_data_list = [
        {"call": "default", "text": "–û–±—ã—á–Ω—ã–π üîÅ", "callback_data": "default_role_call"},
        {"call": "add", "text": "–†–µ–∫–ª–∞–º–Ω—ã–π –≠–∫—Å–ø–µ—Ä—Ç üì£", "callback_data": "add_role_call"},
        {"call": "hack", "text": "–•–∞–∫–Ω—É—Ç—ã–π GPT üëÅ‚Äçüó®", "callback_data": "hack_role_call"},
        {"call": "seo", "text": "CEO —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç üëî", "callback_data": "seo_role_call"},
        {"call": "psicho", "text": "–ü—Å–∏—Ö–æ–ª–æ–≥ üßò‚Äç", "callback_data": "psicho_role_call"},
        {"call": "fullstack", "text": "Fullstack –†–∞–∑—Ä–∞–±-–∏–∫ üíª", "callback_data": "fullstack_role_call"},
        {"call": "codegen", "text": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ö–æ–¥–∞ üí°", "callback_data": "codegen_role_call"},
        {"call": "tech", "text": "–¢–µ—Ö–Ω-–∏–π –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ üìö", "callback_data": "tech_role_call"},
        {"call": "repeater", "text": "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä üéì", "callback_data": "repeater_role_call"},
        {"call": "news", "text": "–ù–æ–≤–æ—Å—Ç–Ω–æ–π –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä üåê", "callback_data": "news_role_call"},
        {"call": "textred", "text": "–†–µ–¥–∞–∫—Ç–æ—Ä –¢–µ–∫—Å—Ç–∞ üìù", "callback_data": "textred_role_call"},
        {"call": "creative", "text": "–ü–∏—Å–∞—Ç–µ–ª—å –°—Ç–∞—Ç–µ–π ‚úçÔ∏è", "callback_data": "creative_role_call"},
        {"call": "finance", "text": "–§–∏–Ω–∞–Ω-—ã–π –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç üí∞", "callback_data": "finance_role_call"},
        {"call": "twowords", "text": "–ö—Ä–∞—Ç–∫–æ ‚è©", "callback_data": "twowords_role_call"},
    ]

    keyboard = InlineKeyboardMarkup(row_width=2)

    for index, button_data in enumerate(button_data_list, start=1):
        callback_data = button_data["callback_data"]
        text = button_data["text"]
        call = button_data["call"]


        if call == name:
            text = "‚úÖ " + text

        elif call == role:
            text = "‚úÖ " + text

        button = InlineKeyboardButton(text, callback_data=callback_data)
        globals()[f'item{index}'] = button

    keyboard.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12, item13, item14)
    if status == "on":
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="back_call"))
    else:
        pass

    return keyboard

async def gpt_s(selected_model, model_call):
    keyboard = InlineKeyboardMarkup(row_width=1)
    gpt_buttons = [
        {"model": "gpt-3.5-turbo", "callback": "gpt_3_5_turbo_call"},
        {"model": "gpt-3.5-turbo-1106", "callback": "gpt_3_5_turbo_1106_call"},
        {"model": "gpt-3.5-turbo-0613", "callback": "gpt_3_5_turbo_0613_call"},
        {"model": "gpt-3.5-turbo-16k", "callback": "gpt_3_5_turbo_16k_call"},
        {"model": "gpt-3.5-turbo-16k-0613", "callback": "gpt_3_5_turbo_16k_0613_call"},
        {"model": "gpt-3.5-turbo-instruct", "callback": "gpt_3_5_turbo_instruct_call"},
        {"model": "gpt-3.5-turbo-instruct-0914", "callback": "gpt_3_5_turbo_instruct_0914_call"},
        {"model": "gpt-4", "callback": "gpt_4_call"},
        {"model": "gpt-4-1106-preview", "callback": "gpt_4_1106_preview_call"}
        ]
    for index, button_data in enumerate(gpt_buttons, start=1):
        callback = button_data["callback"]
        model = button_data["model"]

        if model_call == model:
            model = "‚úÖ " + model

        elif model == selected_model:
            model = "‚úÖ " + model

        button = InlineKeyboardButton(model, callback_data=callback)
        globals()[f'item{index}'] = button

    keyboard.add(item1, item2, item3, item4, item5, item6, item7, item8, item9)
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="back_call"))
    return keyboard

async def settings(db_context, db_voice):
    keyboard = InlineKeyboardMarkup(row_width=1)
    item1 = InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å GPT", callback_data="change_gpt_model_call")
    item2 = InlineKeyboardButton("üé≠ –í—ã–±—Ä–∞—Ç—å GPT - –†–æ–ª—å", callback_data="change_role_call")

    if db_context == "off":
        item3 = InlineKeyboardButton("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", callback_data="context_off_call")
    elif db_context == "on":
        item3 = InlineKeyboardButton("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", callback_data="context_on_call")
    item4 = InlineKeyboardButton("üîä –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç", callback_data="voice_setting_call")
    if db_voice == "on":
        item4.text = "üîä –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç"
    elif db_voice == "off":
        item4.text = "üîá –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç"

    keyboard.add(item1, item3, item2, item4)
    return keyboard

async def main_kb():
    keyboard = ReplyKeyboardMarkup(one_time_keyboard=False, row_width=3, resize_keyboard=True)
    item1 = KeyboardButton('üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    item2 = KeyboardButton('‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    item3 = KeyboardButton('üé≠GPT - –†–æ–ª–∏')
    keyboard.add(item1, item2, item3)
    keyboard.add(KeyboardButton('üöÄ–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞'))
    return keyboard


yookassa_processor = YooKassaPaymentProcessor(YOKASSA_SHOP, YOKASSA_KEY)


async def payment_1_fun(user_id):
    payment_1 = yookassa_processor.create_payment(amount_value=400.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Mini –Ω–∞ –º–µ—Å—è—Ü", user_id=user_id)
    return payment_1
async def payment_2_fun(user_id):
    payment_2 = yookassa_processor.create_payment(amount_value=700.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Starter –Ω–∞ –º–µ—Å—è—Ü", user_id=user_id)
    return payment_2
async def payment_3_fun(user_id):
    payment_3 = yookassa_processor.create_payment(amount_value=1200.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Premium –Ω–∞ –º–µ—Å—è—Ü", user_id=user_id)
    return payment_3
async def payment_4_fun(user_id):
    payment_4 = yookassa_processor.create_payment(amount_value=1700.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Ultra –Ω–∞ –º–µ—Å—è—Ü", user_id=user_id)
    return payment_4
async def payment_5_fun(user_id):
    payment_5 = yookassa_processor.create_payment(amount_value=3900.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Maximum –Ω–∞ –º–µ—Å—è—Ü", user_id=user_id)
    return payment_5
async def payment_6_fun(user_id):
    payment_6 = yookassa_processor.create_payment(amount_value=1800.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Mini –Ω–∞ –ø–æ–ª–≥–æ–¥–∞", user_id=user_id)
    return payment_6
async def payment_7_fun(user_id):
    payment_7 = yookassa_processor.create_payment(amount_value=3900.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Starter –Ω–∞ –ø–æ–ª–≥–æ–¥–∞", user_id=user_id)
    return payment_7
async def payment_8_fun(user_id):
    payment_8 = yookassa_processor.create_payment(amount_value=7000.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Premium –Ω–∞ –ø–æ–ª–≥–æ–¥–∞", user_id=user_id)
    return payment_8
async def payment_9_fun(user_id):
    payment_9 = yookassa_processor.create_payment(amount_value=9500.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Ultra –Ω–∞ –ø–æ–ª–≥–æ–¥–∞", user_id=user_id)
    return payment_9
async def payment_10_fun(user_id):
    payment_10 = yookassa_processor.create_payment(amount_value=22000.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Maximum –Ω–∞ –ø–æ–ª–≥–æ–¥–∞", user_id=user_id)
    return payment_10
async def payment_11_fun(user_id):
    payment_11 = yookassa_processor.create_payment(amount_value=3400.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Mini –Ω–∞ –≥–æ–¥", user_id=user_id)
    return payment_11
async def payment_12_fun(user_id):
    payment_12 = yookassa_processor.create_payment(amount_value=7600.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Starter –Ω–∞ –≥–æ–¥", user_id=user_id)
    return payment_12
async def payment_13_fun(user_id):
    payment_13 = yookassa_processor.create_payment(amount_value=13000.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Premium –Ω–∞ –≥–æ–¥", user_id=user_id)
    return payment_13
async def payment_14_fun(user_id):
    payment_14 = yookassa_processor.create_payment(amount_value=18000.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Ultra –Ω–∞ –≥–æ–¥", user_id=user_id)
    return payment_14
async def payment_15_fun(user_id):
    payment_15 = yookassa_processor.create_payment(amount_value=42000.00, currency="RUB", return_url="https://t.me/it_neural_bot", description="–ü–æ–¥–ø–∏—Å–∫–∞ Maximum –Ω–∞ –≥–æ–¥", user_id=user_id)
    return payment_15


async def create_payment_keyboard(amount, url):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ{amount}", url=url))
    keyboard.add(InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data="back_premium_call"))
    return keyboard

# –¢–∞—Ä–∏—Ñ Mini, –ú–µ—Å—è—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_mini_monthly_keyboard(user_id):
    buy_mini_monthly_keyboard = await create_payment_keyboard(400, await payment_1_fun(user_id))
    return buy_mini_monthly_keyboard

# –¢–∞—Ä–∏—Ñ Starter, –ú–µ—Å—è—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_starter_monthly_keyboard(user_id):
    buy_starter_monthly_keyboard = await create_payment_keyboard(700, await payment_2_fun(user_id))
    return buy_starter_monthly_keyboard

# –¢–∞—Ä–∏—Ñ Premium, –ú–µ—Å—è—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_premium_monthly_keyboard(user_id):
    buy_premium_monthly_keyboard = await create_payment_keyboard(1200, await payment_3_fun(user_id))
    return buy_premium_monthly_keyboard

# –¢–∞—Ä–∏—Ñ Ultra, –ú–µ—Å—è—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_ultra_monthly_keyboard(user_id):
    buy_ultra_monthly_keyboard = await create_payment_keyboard(1700, await payment_4_fun(user_id))
    return buy_ultra_monthly_keyboard

# –¢–∞—Ä–∏—Ñ Maximum, –ú–µ—Å—è—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_maximum_monthly_keyboard(user_id):
    buy_maximum_monthly_keyboard = await create_payment_keyboard(3900, await  payment_5_fun(user_id))
    return buy_maximum_monthly_keyboard

# –¢–∞—Ä–∏—Ñ Mini, –ü–æ–ª–≥–æ–¥–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_mini_half_annual_keyboard(user_id):
    buy_mini_half_annual_keyboard = await create_payment_keyboard(1800, await payment_6_fun(user_id))
    return buy_mini_half_annual_keyboard

# –¢–∞—Ä–∏—Ñ Starter, –ü–æ–ª–≥–æ–¥–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_starter_half_annual_keyboard(user_id):
    buy_starter_half_annual_keyboard = await create_payment_keyboard(3900, await  payment_7_fun(user_id))
    return buy_starter_half_annual_keyboard

# –¢–∞—Ä–∏—Ñ Premium, –ü–æ–ª–≥–æ–¥–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_premium_half_annual_keyboard(user_id):
    buy_premium_half_annual_keyboard = await create_payment_keyboard(7000, await payment_8_fun(user_id))
    return buy_premium_half_annual_keyboard

# –¢–∞—Ä–∏—Ñ Ultra, –ü–æ–ª–≥–æ–¥–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_ultra_half_annual_keyboard(user_id):
    buy_ultra_half_annual_keyboard = await create_payment_keyboard(9500, await payment_9_fun(user_id))
    return buy_ultra_half_annual_keyboard

# –¢–∞—Ä–∏—Ñ Maximum, –ü–æ–ª–≥–æ–¥–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_maximum_half_annual_keyboard(user_id):
    buy_maximum_half_annual_keyboard = await create_payment_keyboard(22000, await payment_10_fun(user_id))
    return buy_maximum_half_annual_keyboard

# –¢–∞—Ä–∏—Ñ Mini, –ì–æ–¥–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_mini_annual_keyboard(user_id):
    buy_mini_annual_keyboard = await create_payment_keyboard(3400, await payment_11_fun(user_id))
    return buy_mini_annual_keyboard

# –¢–∞—Ä–∏—Ñ Starter, –ì–æ–¥–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_starter_annual_keyboard(user_id):
    buy_starter_annual_keyboard = await create_payment_keyboard(7600, await payment_12_fun(user_id))
    return buy_starter_annual_keyboard

# –¢–∞—Ä–∏—Ñ Premium, –ì–æ–¥–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_premium_annual_keyboard(user_id):
    buy_premium_annual_keyboard = await create_payment_keyboard(13000, await payment_13_fun(user_id))
    return buy_premium_annual_keyboard

# –¢–∞—Ä–∏—Ñ Ultra, –ì–æ–¥–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_ultra_annual_keyboard(user_id):
    buy_ultra_annual_keyboard = await create_payment_keyboard(18000, await payment_14_fun(user_id))
    return buy_ultra_annual_keyboard

# –¢–∞—Ä–∏—Ñ Maximum, –ì–æ–¥–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
async def buy_maximum_annual_keyboard(user_id):
    buy_maximum_annual_keyboard = await create_payment_keyboard(42000, await payment_15_fun(user_id))
    return buy_maximum_annual_keyboard


async def photo_back_keyboard(status):
    keyboard = InlineKeyboardMarkup(row_width=1)
    item1 = InlineKeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="photo_back_call")
    if status == "on":
        item1.text = "–û—Ç–º–µ–Ω–∞"
    keyboard.add(item1)
    return keyboard

async def photo_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    item1 = InlineKeyboardButton("üåü –ê–Ω–∏–º–µ", callback_data="photo_anime_call")
    item2 = InlineKeyboardButton("üß† –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="photo_math_call")
    item3 = InlineKeyboardButton("üìù –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞", callback_data="photo_input_call")
    item4 = InlineKeyboardButton("üïµÔ∏è‚Äç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å", callback_data="photo_detect_call")
    item5 = InlineKeyboardButton("üö´ –£–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω*", callback_data="photo_erase_call")
    item6 = InlineKeyboardButton("üîÑ –ó–∞–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω*", callback_data="photo_change_call")
    item7 = InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç*", callback_data="photo_deletetext_call")
    item8 = InlineKeyboardButton("üîç –°—É–ø–µ—Ä-—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ*", callback_data="photo_resolution_call")

    keyboard.add(item1, item2, item3, item4, item5, item6, item7, item8)

    keyboard.add(InlineKeyboardButton("üåê GPT-4 Vision*", callback_data="photo_gpt4vision_call"))
    keyboard.add(InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="photo_help_call"))

    return keyboard

async def create_premium_buttons(plan, plan_price, mini_price, starter_price, premium_price, ultra_price, maximum_price, selected_plan):
    keyboard = InlineKeyboardMarkup(row_width=3)
    item_monthly = InlineKeyboardButton("–ú–µ—Å—è—á–Ω–∞—è", callback_data="sub_monthly")
    item_half_annual = InlineKeyboardButton("–ü–æ–ª—É–≥–æ–¥–æ–≤–∞—è", callback_data="sub_half_annual")
    item_annual = InlineKeyboardButton("–ì–æ–¥–æ–≤–∞—è", callback_data="sub_annual")

    if plan == selected_plan:
        item_monthly.text = "üü¢–ú–µ—Å—è—á–Ω–∞—è" if plan == "monthly" else "–ú–µ—Å—è—á–Ω–∞—è"
        item_half_annual.text = "üü¢–ü–æ–ª—É–≥–æ–¥–æ–≤–∞—è" if plan == "half_annual" else "–ü–æ–ª—É–≥–æ–¥–æ–≤–∞—è"
        item_annual.text = "üü¢–ì–æ–¥–æ–≤–∞—è" if plan == "annual" else "–ì–æ–¥–æ–≤–∞—è"

    keyboard.add(item_monthly, item_half_annual, item_annual)
    if selected_plan == "half_annual":
        keyboard.add(InlineKeyboardButton(f"üëÅ‚Äçüó® Mini: ‚ÇΩ{mini_price}/{plan_price}", callback_data=f"mini_{plan}"))
        keyboard.add(InlineKeyboardButton(f"üëå Starter: ‚ÇΩ{starter_price}/{plan_price}", callback_data=f"starter_{plan}"))
        keyboard.add(InlineKeyboardButton(f"üöÄ Premium: ‚ÇΩ{premium_price}/{plan_price}", callback_data=f"premium_{plan}"))
        keyboard.add(InlineKeyboardButton(f"üî• Ultra: ‚ÇΩ{ultra_price}/{plan_price}", callback_data=f"ultra_{plan}"))
        keyboard.add(InlineKeyboardButton(f"üíØ Maximum: ‚ÇΩ{maximum_price}/{plan_price}", callback_data=f"maximum_{plan}"))
    elif selected_plan == "monthly":
        keyboard.add(InlineKeyboardButton(f"üëÅ‚Äçüó® Mini: ‚ÇΩ{mini_price}/{plan_price}", callback_data=f"mini_{plan}"))
        keyboard.add(InlineKeyboardButton(f"üëå Starter: ‚ÇΩ{starter_price}/{plan_price}", callback_data=f"starter_{plan}"))
        keyboard.add(InlineKeyboardButton(f"üöÄ Premium: ‚ÇΩ{premium_price}/{plan_price}", callback_data=f"premium_{plan}"))
        keyboard.add(InlineKeyboardButton(f"üî• Ultra: ‚ÇΩ{ultra_price}/{plan_price}", callback_data=f"ultra_{plan}"))
        keyboard.add(InlineKeyboardButton(f"üíØ Maximum: ‚ÇΩ{maximum_price}/{plan_price}", callback_data=f"maximum_{plan}"))
    elif selected_plan == "annual":
        keyboard.add(InlineKeyboardButton(f"üëÅ‚Äçüó® Mini: ‚ÇΩ{mini_price}/{plan_price}", callback_data=f"mini_{plan}"))
        keyboard.add(InlineKeyboardButton(f"üëå Starter: ‚ÇΩ{starter_price}/{plan_price}", callback_data=f"starter_{plan}"))
        keyboard.add(InlineKeyboardButton(f"üöÄ Premium: ‚ÇΩ{premium_price}/{plan_price}", callback_data=f"premium_{plan}"))
        keyboard.add(InlineKeyboardButton(f"üî• Ultra: ‚ÇΩ{ultra_price}/{plan_price}", callback_data=f"ultra_{plan}"))
        keyboard.add(InlineKeyboardButton(f"üíØ Maximum: ‚ÇΩ{maximum_price}/{plan_price}", callback_data=f"maximum_{plan}"))

    return keyboard
